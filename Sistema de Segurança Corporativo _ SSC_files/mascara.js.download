/*******************************************************************************
 * Minerium Meta Framework
 * 
 * Licença: GNU Lesser General Public License (LGPL), version 3.
 * 
 * Copyright (C) (2013-2018) Prodemge. Todos os direitos reservados.
 * 
 * Este arquivo é parte do Minerium Meta Framework O Minerium Meta Framework é
 * um software livre; você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da GNU Lesser General Public License (LGPL), version 3.
 * 
 * Este framework é distribuído na esperança de que possa ser útil, mas SEM
 * NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO
 * ou APLICAÇÃO EM PARTICULAR. Ver arquivo LICENSE.md no diretório raiz ou
 * acessar <https://www.gnu.org/licenses/lgpl.html>
 ******************************************************************************/

function rg(compId) {
	mascara(compId, "aa-99999999");
}

function telefone_antigo(compId) {
	jQuery(compId).mask("(99) 9999-9999?9").focusout(
			function(event) {
				var target, phone, element;
				target = (event.currentTarget) ? event.currentTarget
						: event.srcElement;
				phone = target.value.replace(/\D/g, '');
				element = $(target);
				element.unmask();
				if (phone.length > 10) {
					element.mask("(99) 99999-999?9");
				} else {
					element.mask("(99) 9999-9999?9");
				}
			});
}

function dataHora(compId) {
	mascara(compId, "99/99/9999 99:99:99");
}

function monetario(objeto) {
	var campo = recuperaCampo(objeto);
	$(campo).attr('placeholder', '______,__');
	$(campo).priceFormat({
		prefix : '',
		centsSeparator : ',',
		thousandsSeparator : '.'
	});
}

function monetario(objeto, centLimit) {
	var campo = recuperaCampo(objeto);
	$(campo).attr('placeholder', '______,__');
	$(campo).priceFormat({
		prefix : '',
		centsSeparator : ',',
		thousandsSeparator : '.',
		centsLimit : centLimit
	});
}

function monetario(objeto, centLimit, length, aceitaNegativo) {
	var campo = recuperaCampo(objeto);
	$(campo).attr('placeholder', '______,__');
	$(campo).priceFormat({
		limit : length,
		prefix : '',
		centsSeparator : ',',
		thousandsSeparator : '.',
		centsLimit : centLimit,
		allowNegative: aceitaNegativo
	});
}

function mascara(compId, mask) {
	compId = '#' + compId;
	jQuery(compId).mask(mask);
}

function onPaste(compId, mask) {
	compId = '#' + compId;
	$(compId).on('paste', function(e) {
		e.defaultPrevented = true;
		e.stopPropagation();
	});
}

function autotab(id) {
	$(document).ready(function() {
		$('#' + id).autotab_filter({
			format : 'all',
			uppercase : false
		});
	});
}

function upper(evento) {
	$(document).ready(function() {
		var campo = document.getElementById(evento.currentTarget.uuid)
		var posicaoCursor = getCaretPosition(campo);
		campo.value = campo.value.toUpperCase();
		if (evento.which != 8 // backspace
				&& evento.which != 0 && evento.which != 16 // shift
				&& evento.which != 35 && evento.which != 36 // home e end
				&& evento.which != 37 // left
				&& evento.which != 39 // right
				&& evento.which != 9) {// tab
			setCaretPosition(campo, posicaoCursor); 
		}
	});
}



function getCaretPosition(ctrl) {
	var CaretPos = 0; // IE Support
	if (document.selection) {
		// ctrl.focus();
		var Sel = document.selection.createRange();
		Sel.moveStart('character', -ctrl.value.length);
		CaretPos = Sel.text.length;
	}
	// Firefox support
	else if (ctrl.selectionStart || ctrl.selectionStart == '0') {
		CaretPos = ctrl.selectionStart;
	}

	return CaretPos;
}

function corrigeCursorBandBox(id) {
	$(document).ready(function() {
		var lstr = document.getElementById(id)

		// Remember original caret position
		// var caretPosition =lstr.value.replace(/^\s+|\s+$/g, '').length;
		setCaretPosition(lstr, '0');
	});

}

function verificarBandboxLenght(e) {
	if (e.keyCode == '8' && $('#' + e.target.id).val() == 0) {
		zAu
				.send(new zk.Event(zk.Widget.$(jq(e.target.id, zk)[0]),
						'onCtrlKey'))
	}
}

function setCaretPosition(ctrl, pos) {
	if (ctrl.setSelectionRange) {
		// ctrl.focus();
		ctrl.setSelectionRange(pos, pos);
	} else if (ctrl.createTextRange) {
		var range = ctrl.createTextRange();
		range.collapse(true);
		range.moveEnd('character', pos);
		range.moveStart('character', pos);
		range.select();
	}
}

/* Função Pai de Mascaras */
function mascara2(o, f) {
	v_obj = o;
	v_fun = f;
	setTimeout("execmascara()", 1);
}

/* Função que Executa os objetos */
function execmascara() {
	v_obj.value = v_fun(v_obj.value);
}

/* Função que Determina as expressões regulares dos objetos */
function leech(v) {
	v = v.replace(/o/gi, "0");
	v = v.replace(/i/gi, "1");
	v = v.replace(/z/gi, "2");
	v = v.replace(/e/gi, "3");
	v = v.replace(/a/gi, "4");
	v = v.replace(/s/gi, "5");
	v = v.replace(/t/gi, "7");
	return v;
}

/* Função que padroniza a conta Contabil */
function ContaContabil(v) {

	a = 7;
	v = v.replace(/\D/g, "");
	v = v.replace(/(\d{1})(\d)/, "$1.$2");
	v = v.replace(/(\d{1})(\d)/, "$1.$2");
	v = v.replace(/(\d{1})(\d)/, "$1.$2");
	v = v.replace(/(\d{1})(\d)/, "$1.$2");
	v = v.replace(/(\d{1})(\d)/, "$1.$2");
	while (a < 25) {
		v = v.replace(/(\d{2})(\d)/, "$1.$2");
		a = a + 2;
	}
	return v;
}

/* Função que ADICIONA A FUNÇÃO ContaContabil aos eventos onkey */
function InjetaJS(v) {

	// elem = document.getElementById('cconta2');
	elem = document.getElementById(v);

	elem.onkeydown = function() {
		mascara2(this, ContaContabil);
	}
	elem.onkeyup = function() {
		mascara2(this, ContaContabil);
	}
	elem.onkeypress = function() {
		mascara2(this, ContaContabil);
	}
}

/**
 * Função que bloqueia evento de colar.
 * <p> Atrelar ao evento "onAfterSize" ou "onBind" (que executa uma vez ao renderizar).
 * 
 * @param objeto objeto "this" ao invocar a função
 * @since 8.2.000
 */
function bloqueiaColar(objeto) {
	var campo = recuperaCampo(objeto);
	$(campo).on("paste", function(evento) {
		evento.preventDefault();
	});
}

/**
 * Função que bloqueia os caracteres que não foram numerais na entrada de dados.
 * <p> Atrelar ao evento "onAfterSize" ou "onBind" (que executa uma vez ao renderizar).
 * 
 * @param objeto objeto "this" ao invocar a função
 * @since 8.2.000
 */
function filtraNaoNumericos(objeto) {
	var campo = recuperaCampo(objeto);
	
	$(campo).on("keypress", function(evento) {
		var code = evento.which || evento.keyCode || evento.charCode;
		var ctrl = evento.ctrlKey || evento.metaKey;
		if (code >= 65 && code <= 122 && !ctrl)
			evento.preventDefault();
	});
		
	$(campo).on("input", function(evento) {
		var texto = this.value.replace(/[\D]/g, '');
		this.value = texto;	
	});
}

/**
 * Função que transforma em caixa alta o que for digitado ou colado no campo.
 * <p> Atrelar ao evento "onAfterSize" ou "onBind" (que executa uma vez ao renderizar).
 * 
 * @param objeto objeto "this" ao invocar a função
 * @since 8.2.000
 */
function substituiPorCaixaAlta(objeto) {
	// utiliza CSS para efeitos de visuzalização e transforma
	// em upperCase assim que o input perder o foco
	var campo = recuperaCampo(objeto);
	$(campo).css({'text-transform': 'uppercase'})
		 .on("focusout", function() {
			 this.value = this.value.toLocaleUpperCase();
		 });
}

/**
 * Função que aplica máscara ao campo especificado.
 * <p> Atrelar ao evento "onAfterSize" ou "onBind" (que executa uma vez ao renderizar).
 * 
 * @param objeto objeto "this" ao invocar a função
 * @param mascara padrão da máscara a ser aplicado
 * @since 8.2.001-SNAPSHOT
 */
function aplicaMascara(objeto, mascara) {
	var campo = recuperaCampo(objeto);
	$(campo).mask(mascara, {
  		translation: {
      		'X': {pattern: /[A-Z|a-z]/}
      },
      placeholder: mascara.replace(/[A-Z|a-z|0-9]/g, '_')
  });
}

/**
 * Função que aplica máscara personalizada de telefone ao campo especificado.
 * <p> Atrelar ao evento "onAfterSize" ou "onBind" (que executa uma vez ao renderizar).
 * 
 * @param objeto objeto "this" ao invocar a função
 * @param mascara padrão da máscara a ser aplicado
 * @since 8.2.001
 */
function telefone(objeto) {
	
	var campo = $(recuperaCampo(objeto));
	var mascara = function (val) {
	    return val.replace(/\D/g, '').length === 11 ? '(00) 00000-0000' : '(00) 0000-00009';
	  };
	
	  var opcoes = {
		placeholder: "(__) _____-____",
	    onKeyPress: function(val, e, field, options) {
	        field.mask(mascara.apply({}, arguments), options);
	      }
	  };

	  $(campo).mask(mascara, opcoes);
}

/**
 * Função que abstrai a aplicação de máscara ao componente Cnpjboxbind.
 * <p> Atrelar ao evento "onAfterSize" ou "onBind" (que executa uma vez ao renderizar).
 * 
 * @param objeto objeto "this" ao invocar a função
 * @since 8.2.003-SNAPSHOT
 */
function cnpj(objeto) {
	var mascara = '99.999.999/9999-99';
	var campo = recuperaCampo(objeto);
	
	$(campo).attr('placeholder', mascara.replace(/[0-9a-z]/gi, '_'));
	$(campo).off('input').on('input', function(evento) {
		var formatado = this.value.substr(0, 18).replace(/[^0-9.\/-]/g, '');
		this.value = formatado;
	});
	
	$(campo).mask(mascara);
}

/**
 * Função que abstrai a aplicação de máscara ao componente Cpfboxbind.
 * <p> Atrelar ao evento "onAfterSize" ou "onBind" (que executa uma vez ao renderizar).
 * 
 * @param objeto objeto "this" ao invocar a função
 * @since 8.2.003-SNAPSHOT
 */
function cpf(objeto) {
	var mascara = '999.999.999-99';
	var campo = recuperaCampo(objeto);
	
	$(campo).attr('placeholder', mascara.replace(/[0-9a-z]/gi, '_'));
	$(campo).off('input').on('input', function(evento) {
		var formatado = this.value.substr(0, 14).replace(/[^0-9.-]/g, '');
		this.value = formatado;
	});
	
	$(campo).mask(mascara);
}

/**
* <p> Atrelar ao evento "onAfterSize" ou "onBind" (que executa uma vez ao renderizar).
* 
* @param objeto objeto "this" ao invocar a função
* @since 8.2.003-SNAPSHOT
*/
function cpfCnpj(objeto) {
	var campo = $(recuperaCampo(objeto));
	var mascara = function (val) {
	    return val.replace(/\D/g, '').length > 11 ?  '00.000.000/0000-00' :'000.000.000-009999';
	  };
	
	  var opcoes = {
		placeholder: "___.___.___-__",
	    onKeyPress: function(val, e, field, options) {
	        field.mask(mascara.apply({}, arguments), options);
	      }
	  };
	  $(campo).mask(mascara, opcoes);
}

/**
 * Função que abstrai a aplicação de máscara ao componente Cepboxbind.
 * <p> Atrelar ao evento "onAfterSize" ou "onBind" (que executa uma vez ao renderizar).
 * 
 * @param objeto objeto "this" ao invocar a função
 * @since 8.2.003-SNAPSHOT
 */
function cep(objeto) {
	var mascara = '99.999-999';
	var campo = recuperaCampo(objeto);
	
	$(campo).attr('placeholder', mascara.replace(/[0-9a-z]/gi, '_'));
	$(campo).off('input').on('input', function(evento) {
		var formatado = this.value.substr(0, 10).replace(/[^0-9.-]/g, '');
		this.value = formatado;
	});
	
	$(campo).mask(mascara);
}

/**
 * Função que abstrai a aplicação de máscara ao componente Placaboxbind.
 * <p> Atrelar ao evento "onAfterSize" ou "onBind" (que executa uma vez ao renderizar).
 * 
 * @param objeto objeto "this" ao invocar a função
 * @since 8.2.003-SNAPSHOT
 */
function placa(objeto) {
	var mascara = 'XXX-9999';
	aplicaMascara(objeto, mascara);	
}

/**
 * Função que aplica máscara ao componente Decimalboxbind
 * <p> Aplicado no "setMascara" da classe do componente
 * 
 * @param objeto objeto "this" ao invocar a função
 * @param separadorDecimal o caracter que irá separar as casas decimais
 * @param separadorCentena o caracter que irá separar as centenas 
 * @param numCasasDecimais o número de casas decimais
 * @since 8.2.006-SNAPSHOT
 */
function proMascaraDecimal(objeto, separadorDecimal, separadorCentena, numCasasDecimais) {
	var campo = recuperaCampo(objeto);
	var config = {
			prefix: '',
			centsSeparator: separadorDecimal,
		    thousandsSeparator: separadorCentena,
		    centsLimit: numCasasDecimais
	}
	$(campo).priceFormat(config);
}

/**
 * Função auxiliar que recupera um campo na tela pelo ID ou referência Widget do ZK.
 * 
 *  @param objeto O objeto widget do ZK ou String com o id do campo
 *  @since 8.2.008
 */
function recuperaCampo(objeto) {
	return (objeto instanceof zk.Widget) ? objeto.$n() : document.getElementById(objeto);
}


/**
 * Função para iniciar o processo de assinatura digital. Chama a função iniciarAssinaturaEJB() do Signa e depois faz uma requisição 
 * para o método onAssinar da ProCtr passando o método de assinar da ctr da aplicação que está usando o prodigio.
 * 
 *  @param id da window da aplicação cliente.
 *  @param método que será chamado da ctr da aplicação cliente.
 *  
 *  @since 8.4.001
 */
function iniciarAssinatura(idTela, metodoAssinatura, ambienteSigna){	 
	try{
		iniciarAssinaturaEJB(ambienteSigna);
	    var widget = zk.Widget.$('$'+idTela);
	    var event = new zk.Event(widget, 'onAssinar',metodoAssinatura, {toServer:true});
	    zAu.send(event); 
	}catch(e){
		alert(e);
	}
}
